// <auto-generated />
using System;
using PlatformUnoTest.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PlatformUnoTest.DAL.Migrations
{
    [DbContext(typeof(PlanDbContext))]
    [Migration("20220920054208_TaskAreaAndTaskHistory")]
    partial class TaskAreaAndTaskHistory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("PlatformUnoTest.DAL.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("ParentDepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Отдел главного конструктора",
                            Name = "Отдел ГК",
                            Version = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Отдел зам. главного конструктора по АО",
                            Name = "Отдел зам. ГК по АО",
                            ParentDepartmentId = 1L,
                            Version = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Отдел зам. главного конструктора по ПО",
                            Name = "Отдел зам. ГК по ПО",
                            ParentDepartmentId = 1L,
                            Version = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Отдел главного конструктора (НИО-40)",
                            Name = "Отдел главного конструктора (НИО-40)",
                            ParentDepartmentId = 1L,
                            Version = 0
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Отдел разработки алгоритмического обеспечения (НИО-10)",
                            Name = "ОРАО (НИО-10)",
                            ParentDepartmentId = 2L,
                            Version = 0
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Сектор БУР самолетов (сектор 101)",
                            Name = "Сектор БУР самолетов (сектор 101)",
                            ParentDepartmentId = 5L,
                            Version = 0
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Сектор БУР вертолетов (сектор 102)",
                            Name = "Сектор БУР вертолетов (сектор 102)",
                            ParentDepartmentId = 5L,
                            Version = 0
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Сектор диагностики (сектор 103)",
                            Name = "Сектор диагностики (сектор 103)",
                            ParentDepartmentId = 5L,
                            Version = 0
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Сектор перспективных разработок (сектор 104)",
                            Name = "Сектор перспективных разработок (сектор 104)",
                            ParentDepartmentId = 5L,
                            Version = 0
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Отдел разработки программного обеспечения (НИО-20)",
                            Name = "ОРПО (НИО-20)",
                            ParentDepartmentId = 3L,
                            Version = 0
                        },
                        new
                        {
                            Id = 11L,
                            Description = "Сектор сборки и тестирования программного обеспечения (сектор 201)",
                            Name = "Сектор сборки и тестирования ПО (сектор 201)",
                            ParentDepartmentId = 10L,
                            Version = 0
                        },
                        new
                        {
                            Id = 12L,
                            Description = "Отдел разработки перспективного программного обеспечения (НИО-30)",
                            Name = "ОРППО (НИО-30)",
                            ParentDepartmentId = 3L,
                            Version = 0
                        },
                        new
                        {
                            Id = 13L,
                            Description = "Архив и  техническая библиотека",
                            Name = "Архив и  техническая библиотека",
                            Version = 0
                        });
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.DepartmentEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeadType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("DepartmentsStaff");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentId = 2L,
                            EmployeeId = 6L,
                            HeadType = 1,
                            PositionId = 3L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 2L,
                            DepartmentId = 5L,
                            EmployeeId = 7L,
                            HeadType = 1,
                            PositionId = 5L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 3L,
                            DepartmentId = 6L,
                            EmployeeId = 8L,
                            HeadType = 1,
                            PositionId = 6L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 4L,
                            DepartmentId = 7L,
                            EmployeeId = 10L,
                            HeadType = 1,
                            PositionId = 9L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 5L,
                            DepartmentId = 7L,
                            EmployeeId = 11L,
                            HeadType = 4,
                            PositionId = 8L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 6L,
                            DepartmentId = 8L,
                            EmployeeId = 2L,
                            HeadType = 1,
                            PositionId = 6L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 7L,
                            DepartmentId = 9L,
                            EmployeeId = 9L,
                            HeadType = 1,
                            PositionId = 9L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 8L,
                            DepartmentId = 10L,
                            EmployeeId = 1L,
                            HeadType = 4,
                            PositionId = 10L,
                            StartDate = new DateTime(2006, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 9L,
                            DepartmentId = 13L,
                            EmployeeId = 3L,
                            HeadType = 1,
                            PositionId = 5L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 10L,
                            DepartmentId = 13L,
                            EmployeeId = 4L,
                            HeadType = 4,
                            PositionId = 12L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 11L,
                            DepartmentId = 13L,
                            EmployeeId = 5L,
                            HeadType = 4,
                            PositionId = 13L,
                            StartDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        },
                        new
                        {
                            Id = 12L,
                            DepartmentId = 10L,
                            EmployeeId = 12L,
                            HeadType = 4,
                            PositionId = 10L,
                            StartDate = new DateTime(2006, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = 0
                        });
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Edit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DbContextName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId", "Date")
                        .IsUnique();

                    b.ToTable("Edits");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DismissDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateInCompany")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Leo@Topaz1.local",
                            Guid = new Guid("94a0e648-ed0b-47df-b11b-d68d89c744b2"),
                            Login = "Leo",
                            Name = "Алексей",
                            Patronymic = "Александрович",
                            RoleId = 1L,
                            StartDateInCompany = new DateTime(2006, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Леонович",
                            Version = 0
                        },
                        new
                        {
                            Id = 2L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sorokin@Topaz1.local",
                            Guid = new Guid("f7b08f32-b7e3-46b3-b302-18b2d591136b"),
                            Login = "sorokin",
                            Name = "Кирилл",
                            Patronymic = "Алексеевич",
                            RoleId = 1L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Сорокин",
                            Version = 0
                        },
                        new
                        {
                            Id = 3L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luba@Topaz1.local",
                            Guid = new Guid("2febcbd2-46bb-40c7-8c36-9707c0149334"),
                            Login = "luba",
                            Name = "Люба",
                            Patronymic = "",
                            RoleId = 4L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Балашова",
                            Version = 0
                        },
                        new
                        {
                            Id = 4L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "parshina@Topaz1.local",
                            Guid = new Guid("77e73cc1-700a-4d1a-a052-ba8f099bda53"),
                            Login = "Паршина",
                            Name = "Татьяна",
                            Patronymic = "Олеговна",
                            RoleId = 4L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Паршина",
                            Version = 0
                        },
                        new
                        {
                            Id = 5L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sm_maria@Topaz1.local",
                            Guid = new Guid("dc4f6a07-1187-44d5-a449-d90587578ab3"),
                            Login = "sm_maria",
                            Name = "Мария",
                            Patronymic = "Егоровна",
                            RoleId = 4L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Смыкова",
                            Version = 0
                        },
                        new
                        {
                            Id = 6L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kojenkov@Topaz1.local",
                            Guid = new Guid("2b2e789e-0bda-4a04-b717-98d630fb71b7"),
                            Login = "kojenkov",
                            Name = "Леонид",
                            Patronymic = "",
                            RoleId = 2L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Коженков",
                            Version = 0
                        },
                        new
                        {
                            Id = 7L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "voshikov@Topaz1.local",
                            Guid = new Guid("10fc1303-faac-4ec1-8791-7c3b059a49ee"),
                            Login = "voshikov",
                            Name = "Сергей",
                            Patronymic = "Викторович",
                            RoleId = 2L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Вощиков",
                            Version = 0
                        },
                        new
                        {
                            Id = 8L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alekseev@Topaz1.local",
                            Guid = new Guid("5727587c-65d5-4937-b609-0630f2830aa3"),
                            Login = "alekseev",
                            Name = "Сергей",
                            Patronymic = "Викторович",
                            RoleId = 2L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Алексеев",
                            Version = 0
                        },
                        new
                        {
                            Id = 9L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hokum@Topaz1.local",
                            Guid = new Guid("3146a151-8e20-43df-84b1-ed85ccbbeaaf"),
                            Login = "hokum",
                            Name = "Игорь",
                            Patronymic = "Олегович",
                            RoleId = 2L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Булла",
                            Version = 0
                        },
                        new
                        {
                            Id = 10L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "konyahina@Topaz1.local",
                            Guid = new Guid("2f53c79e-9483-4674-961d-c7847fef80e0"),
                            Login = "konyahina",
                            Name = "Валентина",
                            Patronymic = "Олеговна",
                            RoleId = 2L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Осинцева",
                            Version = 0
                        },
                        new
                        {
                            Id = 11L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergeev@Topaz1.local",
                            Guid = new Guid("bee0cfec-662e-49b7-b51f-6af90ed506a0"),
                            Login = "sergeev",
                            Name = "Андрей",
                            Patronymic = "Вадимович",
                            RoleId = 2L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Сергеев",
                            Version = 0
                        },
                        new
                        {
                            Id = 12L,
                            DateJoined = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gera@Topaz1.local",
                            Guid = new Guid("6192803b-9728-40a4-bd99-b65e83fdffe7"),
                            Login = "gera",
                            Name = "Александр",
                            Patronymic = "",
                            RoleId = 1L,
                            StartDateInCompany = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Surname = "Неумыывакин",
                            Version = 0
                        });
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.InputDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("SystemName")
                        .IsUnique();

                    b.ToTable("InputDevices");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ModuleTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ModuleTypeId", "SystemName", "IsEnabled")
                        .IsUnique();

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.ModuleType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModuleTypeApplicability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ModuleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Модуль 3D модели",
                            IsMandatory = false,
                            ModuleTypeApplicability = 1,
                            Name = "3D модель",
                            Version = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Модуль траектории",
                            IsMandatory = false,
                            ModuleTypeApplicability = 2,
                            Name = "Траектория",
                            Version = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Модуль панели",
                            IsMandatory = false,
                            ModuleTypeApplicability = 2,
                            Name = "Панель",
                            Version = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Задание по-умолчанию",
                            IsMandatory = true,
                            ModuleTypeApplicability = 2,
                            Name = "Задание по-умолчанию",
                            Version = 0
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Обзорное задание",
                            IsMandatory = true,
                            ModuleTypeApplicability = 2,
                            Name = "Обзорное задание",
                            Version = 0
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Скрипт LUA",
                            IsMandatory = false,
                            ModuleTypeApplicability = 3,
                            Name = "Скрипт LUA",
                            Version = 0
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Модуль посадки",
                            IsMandatory = false,
                            ModuleTypeApplicability = 3,
                            Name = "Модуль посадки",
                            Version = 0
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Модуль отчётов",
                            IsMandatory = false,
                            ModuleTypeApplicability = 3,
                            Name = "Отчёт",
                            Version = 0
                        });
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("PlaneTypeGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PlaneTypeGroupId");

                    b.HasIndex("SystemName")
                        .IsUnique();

                    b.ToTable("PlaneTypes");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneTypeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PlaneTypeGroups");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneTypeGroupTechnicalLibraryDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlaneTypeGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TechnicalLibraryDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TechnicalLibraryDocumentId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("PlaneTypeGroupId", "TechnicalLibraryDocumentId")
                        .IsUnique();

                    b.ToTable("PlaneTypeGroupTechnicalLibraryDocuments");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneTypeModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlaneTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("PlaneTypeId", "ModuleId")
                        .IsUnique();

                    b.ToTable("PlaneTypeModules");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Главный конструктор",
                            Version = 0
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Главный конструктор по ПО",
                            Version = 0
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Зам. главного конструктора по АО",
                            Version = 0
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Зам. главного конструктора по ПО",
                            Version = 0
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Начальник отдела",
                            Version = 0
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Начальник сектора",
                            Version = 0
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Инженер-программист",
                            Version = 0
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Конструктор",
                            Version = 0
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Ведущий конструктор",
                            Version = 0
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Программист",
                            Version = 0
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Ведущий программист",
                            Version = 0
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Ведущий специалист",
                            Version = 0
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Библиотекарь",
                            Version = 0
                        });
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.RegSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("PlaneTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PlaneTypeId", "Name")
                        .IsUnique();

                    b.ToTable("RegSystems");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Администратор БД Планов и технической библиотеки",
                            Name = "Администратор БД Планов и технической библиотеки",
                            Type = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Администратор БД Планов",
                            Name = "Администратор БД Планов",
                            Type = 2,
                            Version = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Обычный сотрудник",
                            Name = "Сотрудник",
                            Type = 3,
                            Version = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Администратор технической библиотеки - может редактировать",
                            Name = "Администратор технической библиотеки",
                            Type = 4,
                            Version = 0
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Пользователь технической библиотеки - может просматривать",
                            Name = "Пользователь технической библиотеки",
                            Type = 5,
                            Version = 0
                        });
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RegSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("RegSystemId");

                    b.HasIndex("SystemName", "Language")
                        .IsUnique();

                    b.ToTable("StorageDevices");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RegSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegSystemId");

                    b.HasIndex("VerificatorId");

                    b.ToTable("StorageDeviceGroups");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceGroupModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageDeviceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("StorageDeviceGroupId", "ModuleId")
                        .IsUnique();

                    b.ToTable("StorageDeviceGroupModules");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceGroupTaskBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageDeviceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TaskBaseId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("StorageDeviceGroupId", "TaskBaseId")
                        .IsUnique();

                    b.ToTable("StorageDeviceGroupTaskBases");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceInputDevice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("InputDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("InputDeviceId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("StorageDeviceId", "InputDeviceId")
                        .IsUnique();

                    b.ToTable("StorageDeviceInputDevices");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("StorageDeviceId", "ModuleId")
                        .IsUnique();

                    b.ToTable("StorageDeviceModules");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceTaskBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TaskBaseId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("StorageDeviceId", "TaskBaseId")
                        .IsUnique();

                    b.ToTable("StorageDeviceTaskBases");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceTechnicalLibraryDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TechnicalLibraryDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TechnicalLibraryDocumentId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("StorageDeviceId", "TechnicalLibraryDocumentId")
                        .IsUnique();

                    b.ToTable("StorageDeviceTechnicalLibraryDocuments");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnalogParametersCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DescreteCommandsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("StorageDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("StorageDeviceId", "Name")
                        .IsUnique();

                    b.ToTable("StorageDeviceVersions");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("AmountOfWork")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HoursToComplete")
                        .HasColumnType("INTEGER");

                    b.Property<long>("InitiatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("TaskAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskTypeCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("TaskAreaId");

                    b.HasIndex("TaskTypeCategoryId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("StartDate", "Name")
                        .IsUnique();

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TaskAreas");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("SystemName", "Language")
                        .IsUnique();

                    b.ToTable("TaskBases");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskBaseModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("TaskBaseId", "ModuleId")
                        .IsUnique();

                    b.ToTable("TaskBaseModules");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskBaseTechnicalLibraryDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TechnicalLibraryDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TechnicalLibraryDocumentId");

                    b.HasIndex("VerificatorId");

                    b.HasIndex("TaskBaseId", "TechnicalLibraryDocumentId")
                        .IsUnique();

                    b.ToTable("TaskBaseTechnicalLibraryDocuments");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskHistoryType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TaskId", "Date")
                        .IsUnique();

                    b.ToTable("TaskHistory");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FromId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TaskLinkTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ToId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TaskLinkTypeId");

                    b.HasIndex("ToId");

                    b.HasIndex("FromId", "ToId")
                        .IsUnique();

                    b.ToTable("TaskLinks");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskLinkType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("TaskLinkTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Связь \"родитель - потомок\" (задача - подзадача)",
                            Name = "Задача - подзадача",
                            Type = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Связь \"блокировка\" (задача блокирует выполнение другой)",
                            Name = "Блокировка",
                            Type = 2,
                            Version = 0
                        });
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Раработка нового",
                            Name = "Разработка",
                            Version = 0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Корректировка уже имеющегося",
                            Name = "Корректировка",
                            Version = 0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Запланированная работа",
                            Name = "План",
                            Version = 0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Дополнительная работа",
                            Name = "Доп",
                            Version = 0
                        });
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskTypeCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("TaskTypeCategories");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskWorkHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ActualHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlanEndDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("PlanHours")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PlanStartDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TaskId", "PlanStartDate")
                        .IsUnique();

                    b.ToTable("TaskWorkHours");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TechnicalLibraryDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DbContextName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TechnicalLibraryDocumentGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TechnicalLibraryDocumentGroupId");

                    b.HasIndex("DbContextName", "TableName", "EntityId")
                        .IsUnique();

                    b.ToTable("TechnicalLibraryDocuments");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TechnicalLibraryDocumentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VerificatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VerificatorId");

                    b.ToTable("TechnicalLibraryDocumentGroups");
                });

            modelBuilder.Entity("StorageDeviceStorageDeviceGroup", b =>
                {
                    b.Property<long>("StorageDeviceGroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageDevicesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StorageDeviceGroupsId", "StorageDevicesId");

                    b.HasIndex("StorageDevicesId");

                    b.ToTable("StorageDeviceStorageDeviceGroup");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Department", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Department", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.DepartmentEmployee", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Department", "Department")
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Employee")
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Position", "Position")
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Edit", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Employee", "Employee")
                        .WithMany("Edits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Employee", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Module", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.ModuleType", "ModuleType")
                        .WithMany("Modules")
                        .HasForeignKey("ModuleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleType");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneType", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.PlaneTypeGroup", "PlaneTypeGroup")
                        .WithMany("PlaneTypes")
                        .HasForeignKey("PlaneTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaneTypeGroup");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneTypeGroupTechnicalLibraryDocument", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.PlaneTypeGroup", "PlaneTypeGroup")
                        .WithMany("PlaneTypeGroupTechnicalLibraryDocuments")
                        .HasForeignKey("PlaneTypeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TechnicalLibraryDocument", "TechnicalLibraryDocument")
                        .WithMany()
                        .HasForeignKey("TechnicalLibraryDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("PlaneTypeGroup");

                    b.Navigation("TechnicalLibraryDocument");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneTypeModule", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Module", "Module")
                        .WithMany("PlaneTypeModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.PlaneType", "PlaneType")
                        .WithMany("PlaneTypeModules")
                        .HasForeignKey("PlaneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("Module");

                    b.Navigation("PlaneType");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.RegSystem", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.PlaneType", "PlaneType")
                        .WithMany("RegSystems")
                        .HasForeignKey("PlaneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaneType");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDevice", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.RegSystem", "RegSystem")
                        .WithMany("StorageDevices")
                        .HasForeignKey("RegSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegSystem");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceGroup", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.RegSystem", "RegSystem")
                        .WithMany("StorageDevicesGroups")
                        .HasForeignKey("RegSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("RegSystem");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceGroupModule", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Module", "Module")
                        .WithMany("StorageDeviceGroupsModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.StorageDeviceGroup", "StorageDeviceGroup")
                        .WithMany("StorageDeviceGroupModules")
                        .HasForeignKey("StorageDeviceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("Module");

                    b.Navigation("StorageDeviceGroup");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceGroupTaskBase", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.StorageDeviceGroup", "StorageDeviceGroup")
                        .WithMany("StorageDeviceGroupTaskBases")
                        .HasForeignKey("StorageDeviceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TaskBase", "TaskBase")
                        .WithMany("StorageDeviceGroupsTaskBases")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("StorageDeviceGroup");

                    b.Navigation("TaskBase");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceInputDevice", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.InputDevice", "InputDevice")
                        .WithMany("StorageDevicesInputDevices")
                        .HasForeignKey("InputDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.StorageDevice", "StorageDevice")
                        .WithMany("StorageDevicesInputDevices")
                        .HasForeignKey("StorageDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("InputDevice");

                    b.Navigation("StorageDevice");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceModule", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Module", "Module")
                        .WithMany("StorageDevicesModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.StorageDevice", "StorageDevice")
                        .WithMany("StorageDevicesModules")
                        .HasForeignKey("StorageDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("Module");

                    b.Navigation("StorageDevice");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceTaskBase", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.StorageDevice", "StorageDevice")
                        .WithMany("StorageDevicesTaskBases")
                        .HasForeignKey("StorageDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TaskBase", "TaskBase")
                        .WithMany("StorageDevicesTaskBases")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("StorageDevice");

                    b.Navigation("TaskBase");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceTechnicalLibraryDocument", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.StorageDevice", "StorageDevice")
                        .WithMany("StorageDevicesTechnicalLibraryDocuments")
                        .HasForeignKey("StorageDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TechnicalLibraryDocument", "TechnicalLibraryDocument")
                        .WithMany("StorageDevicesTechnicalLibraryDocuments")
                        .HasForeignKey("TechnicalLibraryDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("StorageDevice");

                    b.Navigation("TechnicalLibraryDocument");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceVersion", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.StorageDevice", "StorageDevice")
                        .WithMany("StorageDeviceVersions")
                        .HasForeignKey("StorageDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("StorageDevice");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Task", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Employee", "Creator")
                        .WithMany("TasksCreated")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Employee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Initiator")
                        .WithMany("TasksInitiated")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TaskArea", "TaskArea")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TaskTypeCategory", "TaskTypeCategory")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Employee");

                    b.Navigation("Initiator");

                    b.Navigation("TaskArea");

                    b.Navigation("TaskType");

                    b.Navigation("TaskTypeCategory");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskBaseModule", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Module", "Module")
                        .WithMany("TaskBaseModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TaskBase", "TaskBase")
                        .WithMany("TaskBaseModules")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("Module");

                    b.Navigation("TaskBase");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskBaseTechnicalLibraryDocument", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.TaskBase", "TaskBase")
                        .WithMany("TaskBaseTechnicalLibraryDocuments")
                        .HasForeignKey("TaskBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TechnicalLibraryDocument", "TechnicalLibraryDocument")
                        .WithMany("TaskBasesTechnicalLibraryDocuments")
                        .HasForeignKey("TechnicalLibraryDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("TaskBase");

                    b.Navigation("TechnicalLibraryDocument");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskHistory", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Task", "Task")
                        .WithMany("TaskHistory")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskLink", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Task", "From")
                        .WithMany("TaskLinkFrom")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.TaskLinkType", "TaskLinkType")
                        .WithMany("TaskLinks")
                        .HasForeignKey("TaskLinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.Task", "To")
                        .WithMany("TaskLinkTo")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("TaskLinkType");

                    b.Navigation("To");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskWorkHour", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Task", "Task")
                        .WithMany("TaskWorkHours")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TechnicalLibraryDocument", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.TechnicalLibraryDocumentGroup", "TechnicalLibraryDocumentGroup")
                        .WithMany("TechnicalLibraryDocuments")
                        .HasForeignKey("TechnicalLibraryDocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalLibraryDocumentGroup");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TechnicalLibraryDocumentGroup", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.Employee", "Verificator")
                        .WithMany()
                        .HasForeignKey("VerificatorId");

                    b.Navigation("Verificator");
                });

            modelBuilder.Entity("StorageDeviceStorageDeviceGroup", b =>
                {
                    b.HasOne("PlatformUnoTest.DAL.StorageDeviceGroup", null)
                        .WithMany()
                        .HasForeignKey("StorageDeviceGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlatformUnoTest.DAL.StorageDevice", null)
                        .WithMany()
                        .HasForeignKey("StorageDevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Department", b =>
                {
                    b.Navigation("ChildDepartments");

                    b.Navigation("DepartmentEmployees");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Employee", b =>
                {
                    b.Navigation("DepartmentEmployees");

                    b.Navigation("Edits");

                    b.Navigation("Tasks");

                    b.Navigation("TasksCreated");

                    b.Navigation("TasksInitiated");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.InputDevice", b =>
                {
                    b.Navigation("StorageDevicesInputDevices");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Module", b =>
                {
                    b.Navigation("PlaneTypeModules");

                    b.Navigation("StorageDeviceGroupsModules");

                    b.Navigation("StorageDevicesModules");

                    b.Navigation("TaskBaseModules");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.ModuleType", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneType", b =>
                {
                    b.Navigation("PlaneTypeModules");

                    b.Navigation("RegSystems");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.PlaneTypeGroup", b =>
                {
                    b.Navigation("PlaneTypeGroupTechnicalLibraryDocuments");

                    b.Navigation("PlaneTypes");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Position", b =>
                {
                    b.Navigation("DepartmentEmployees");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.RegSystem", b =>
                {
                    b.Navigation("StorageDevices");

                    b.Navigation("StorageDevicesGroups");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDevice", b =>
                {
                    b.Navigation("StorageDeviceVersions");

                    b.Navigation("StorageDevicesInputDevices");

                    b.Navigation("StorageDevicesModules");

                    b.Navigation("StorageDevicesTaskBases");

                    b.Navigation("StorageDevicesTechnicalLibraryDocuments");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.StorageDeviceGroup", b =>
                {
                    b.Navigation("StorageDeviceGroupModules");

                    b.Navigation("StorageDeviceGroupTaskBases");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.Task", b =>
                {
                    b.Navigation("TaskHistory");

                    b.Navigation("TaskLinkFrom");

                    b.Navigation("TaskLinkTo");

                    b.Navigation("TaskWorkHours");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskArea", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskBase", b =>
                {
                    b.Navigation("StorageDeviceGroupsTaskBases");

                    b.Navigation("StorageDevicesTaskBases");

                    b.Navigation("TaskBaseModules");

                    b.Navigation("TaskBaseTechnicalLibraryDocuments");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskLinkType", b =>
                {
                    b.Navigation("TaskLinks");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TaskTypeCategory", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TechnicalLibraryDocument", b =>
                {
                    b.Navigation("StorageDevicesTechnicalLibraryDocuments");

                    b.Navigation("TaskBasesTechnicalLibraryDocuments");
                });

            modelBuilder.Entity("PlatformUnoTest.DAL.TechnicalLibraryDocumentGroup", b =>
                {
                    b.Navigation("TechnicalLibraryDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
